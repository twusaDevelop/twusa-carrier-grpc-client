<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: fedex.proto

namespace Carrier\Fedex\RequestedShipment;

use UnexpectedValueException;

/**
 * 提货方式枚举
 *
 * Protobuf type <code>fedex.RequestedShipment.PickupType</code>
 */
class PickupType
{
    /**
     * 将联系联邦快递要求取件
     *
     * Generated from protobuf enum <code>CONTACT_FEDEX_TO_SCHEDULE = 0;</code>
     */
    const CONTACT_FEDEX_TO_SCHEDULE = 0;
    /**
     * 货物将被投递
     *
     * Generated from protobuf enum <code>DROPOFF_AT_FEDEX_LOCATION = 1;</code>
     */
    const DROPOFF_AT_FEDEX_LOCATION = 1;
    /**
     * 货物将作为定期提货的一部分被提货
     *
     * Generated from protobuf enum <code>USE_SCHEDULED_PICKUP = 2;</code>
     */
    const USE_SCHEDULED_PICKUP = 2;

    private static $valueToName = [
        self::CONTACT_FEDEX_TO_SCHEDULE => 'CONTACT_FEDEX_TO_SCHEDULE',
        self::DROPOFF_AT_FEDEX_LOCATION => 'DROPOFF_AT_FEDEX_LOCATION',
        self::USE_SCHEDULED_PICKUP => 'USE_SCHEDULED_PICKUP',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(PickupType::class, \Carrier\Fedex\RequestedShipment_PickupType::class);

