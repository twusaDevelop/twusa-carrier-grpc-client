<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: fedex.proto

namespace Carrier\Fedex\CustomerReferences;

use UnexpectedValueException;

/**
 * Protobuf type <code>fedex.CustomerReferences.CustomerReferenceType</code>
 */
class CustomerReferenceType
{
    /**
     * Generated from protobuf enum <code>CUSTOMER_REFERENCE = 0;</code>
     */
    const CUSTOMER_REFERENCE = 0;
    /**
     * Generated from protobuf enum <code>DEPARTMENT_NUMBER = 1;</code>
     */
    const DEPARTMENT_NUMBER = 1;
    /**
     * Generated from protobuf enum <code>INVOICE_NUMBER = 2;</code>
     */
    const INVOICE_NUMBER = 2;
    /**
     * Generated from protobuf enum <code>P_O_NUMBER = 3;</code>
     */
    const P_O_NUMBER = 3;
    /**
     * Generated from protobuf enum <code>INTRACOUNTRY_REGULATORY_REFERENCE = 4;</code>
     */
    const INTRACOUNTRY_REGULATORY_REFERENCE = 4;
    /**
     * Generated from protobuf enum <code>RMA_ASSOCIATION = 5;</code>
     */
    const RMA_ASSOCIATION = 5;

    private static $valueToName = [
        self::CUSTOMER_REFERENCE => 'CUSTOMER_REFERENCE',
        self::DEPARTMENT_NUMBER => 'DEPARTMENT_NUMBER',
        self::INVOICE_NUMBER => 'INVOICE_NUMBER',
        self::P_O_NUMBER => 'P_O_NUMBER',
        self::INTRACOUNTRY_REGULATORY_REFERENCE => 'INTRACOUNTRY_REGULATORY_REFERENCE',
        self::RMA_ASSOCIATION => 'RMA_ASSOCIATION',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(CustomerReferenceType::class, \Carrier\Fedex\CustomerReferences_CustomerReferenceType::class);

